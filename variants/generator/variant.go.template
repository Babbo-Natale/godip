package $variant_lower

import (
	"github.com/zond/godip"
	"github.com/zond/godip/graph"
	"github.com/zond/godip/state"
	"github.com/zond/godip/variants/classical"
	"github.com/zond/godip/variants/common"
)

const (
$nation_declarations
)

$nation_list

var $variant_camel = common.Variant{
	Name:       "$variant",
	Graph:      func() godip.Graph { return ${variant_camel}Graph() },
	Start:      ${variant_camel}Start,
	Blank:      ${variant_camel}Blank,
	Phase:      classical.NewPhase,
	Parser:     classical.Parser,
	Nations:    Nations,
	PhaseTypes: classical.PhaseTypes,
	Seasons:    classical.Seasons,
	UnitTypes:  classical.UnitTypes,
	SoloWinner: common.SCCountWinner($sc_count),
	SVGMap: func() ([]byte, error) {
		return Asset("svg/${variant_lower}map.svg")
	},
	SVGVersion: "1",
	SVGUnits: map[godip.UnitType]func() ([]byte, error){
		godip.Army: func() ([]byte, error) {
			return classical.Asset("svg/army.svg")
		},
		godip.Fleet: func() ([]byte, error) {
			return classical.Asset("svg/fleet.svg")
		},
	},
	CreatedBy:   "",
	Version:     "",
	Description: "",
	Rules: "",
}

func ${variant_camel}Blank(phase godip.Phase) *state.State {
	return state.New(${variant_camel}Graph(), phase, classical.BackupRule)
}

func ${variant_camel}Start() (result *state.State, err error) {
	startPhase := classical.Phase($start_year, godip.Spring, godip.Movement)
	result = state.New(${variant_camel}Graph(), startPhase, classical.BackupRule)
	if err = result.SetUnits(map[godip.Province]godip.Unit{
$units
	}); err != nil {
		return
	}
	result.SetSupplyCenters(map[godip.Province]godip.Nation{
$supply_centers
	})
	return
}

func ${variant_camel}Graph() *graph.Graph {
	return graph.New().
$graph
		Done()
}
